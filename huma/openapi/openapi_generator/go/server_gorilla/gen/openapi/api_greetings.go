// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Awesome GO API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GreetingsAPIController binds http requests to an api service and writes the service results to the http response
type GreetingsAPIController struct {
	service GreetingsAPIServicer
	errorHandler ErrorHandler
}

// GreetingsAPIOption for how the controller is set up.
type GreetingsAPIOption func(*GreetingsAPIController)

// WithGreetingsAPIErrorHandler inject ErrorHandler into controller
func WithGreetingsAPIErrorHandler(h ErrorHandler) GreetingsAPIOption {
	return func(c *GreetingsAPIController) {
		c.errorHandler = h
	}
}

// NewGreetingsAPIController creates a default api controller
func NewGreetingsAPIController(s GreetingsAPIServicer, opts ...GreetingsAPIOption) *GreetingsAPIController {
	controller := &GreetingsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GreetingsAPIController
func (c *GreetingsAPIController) Routes() Routes {
	return Routes{
		"Greeting": Route{
			strings.ToUpper("Get"),
			"/greeting/{name}",
			c.Greeting,
		},
	}
}

// Greeting - Say hello to someone
func (c *GreetingsAPIController) Greeting(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.Greeting(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

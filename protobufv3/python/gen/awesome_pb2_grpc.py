# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import awesome_pb2 as awesome__pb2


class DefaultStub(object):
    """The service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Greeting = channel.unary_unary(
                '/com.github.veqryn.awesome.Default/Greeting',
                request_serializer=awesome__pb2.GreetingReq.SerializeToString,
                response_deserializer=awesome__pb2.GreetingResp.FromString,
                _registered_method=True)
        self.Review = channel.unary_unary(
                '/com.github.veqryn.awesome.Default/Review',
                request_serializer=awesome__pb2.ReviewReq.SerializeToString,
                response_deserializer=awesome__pb2.ReviewResp.FromString,
                _registered_method=True)
        self.Error = channel.unary_unary(
                '/com.github.veqryn.awesome.Default/Error',
                request_serializer=awesome__pb2.ErrorReq.SerializeToString,
                response_deserializer=awesome__pb2.ErrorResp.FromString,
                _registered_method=True)


class DefaultServicer(object):
    """The service definition.
    """

    def Greeting(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Review(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Error(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DefaultServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Greeting': grpc.unary_unary_rpc_method_handler(
                    servicer.Greeting,
                    request_deserializer=awesome__pb2.GreetingReq.FromString,
                    response_serializer=awesome__pb2.GreetingResp.SerializeToString,
            ),
            'Review': grpc.unary_unary_rpc_method_handler(
                    servicer.Review,
                    request_deserializer=awesome__pb2.ReviewReq.FromString,
                    response_serializer=awesome__pb2.ReviewResp.SerializeToString,
            ),
            'Error': grpc.unary_unary_rpc_method_handler(
                    servicer.Error,
                    request_deserializer=awesome__pb2.ErrorReq.FromString,
                    response_serializer=awesome__pb2.ErrorResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.github.veqryn.awesome.Default', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('com.github.veqryn.awesome.Default', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Default(object):
    """The service definition.
    """

    @staticmethod
    def Greeting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/com.github.veqryn.awesome.Default/Greeting',
            awesome__pb2.GreetingReq.SerializeToString,
            awesome__pb2.GreetingResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Review(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/com.github.veqryn.awesome.Default/Review',
            awesome__pb2.ReviewReq.SerializeToString,
            awesome__pb2.ReviewResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Error(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/com.github.veqryn.awesome.Default/Error',
            awesome__pb2.ErrorReq.SerializeToString,
            awesome__pb2.ErrorResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

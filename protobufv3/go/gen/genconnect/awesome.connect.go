// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: awesome.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/veqryn/awesome-go-api/protobufv3/go/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DefaultName is the fully-qualified name of the Default service.
	DefaultName = "com.github.veqryn.awesome.Default"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DefaultGreetingProcedure is the fully-qualified name of the Default's Greeting RPC.
	DefaultGreetingProcedure = "/com.github.veqryn.awesome.Default/Greeting"
	// DefaultReviewProcedure is the fully-qualified name of the Default's Review RPC.
	DefaultReviewProcedure = "/com.github.veqryn.awesome.Default/Review"
	// DefaultErrorProcedure is the fully-qualified name of the Default's Error RPC.
	DefaultErrorProcedure = "/com.github.veqryn.awesome.Default/Error"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	defaultServiceDescriptor        = gen.File_awesome_proto.Services().ByName("Default")
	defaultGreetingMethodDescriptor = defaultServiceDescriptor.Methods().ByName("Greeting")
	defaultReviewMethodDescriptor   = defaultServiceDescriptor.Methods().ByName("Review")
	defaultErrorMethodDescriptor    = defaultServiceDescriptor.Methods().ByName("Error")
)

// DefaultClient is a client for the com.github.veqryn.awesome.Default service.
type DefaultClient interface {
	Greeting(context.Context, *connect.Request[gen.GreetingReq]) (*connect.Response[gen.GreetingResp], error)
	Review(context.Context, *connect.Request[gen.ReviewReq]) (*connect.Response[gen.ReviewResp], error)
	Error(context.Context, *connect.Request[gen.ErrorReq]) (*connect.Response[gen.ErrorResp], error)
}

// NewDefaultClient constructs a client for the com.github.veqryn.awesome.Default service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDefaultClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DefaultClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &_defaultClient{
		greeting: connect.NewClient[gen.GreetingReq, gen.GreetingResp](
			httpClient,
			baseURL+DefaultGreetingProcedure,
			connect.WithSchema(defaultGreetingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		review: connect.NewClient[gen.ReviewReq, gen.ReviewResp](
			httpClient,
			baseURL+DefaultReviewProcedure,
			connect.WithSchema(defaultReviewMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		error: connect.NewClient[gen.ErrorReq, gen.ErrorResp](
			httpClient,
			baseURL+DefaultErrorProcedure,
			connect.WithSchema(defaultErrorMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// _defaultClient implements DefaultClient.
type _defaultClient struct {
	greeting *connect.Client[gen.GreetingReq, gen.GreetingResp]
	review   *connect.Client[gen.ReviewReq, gen.ReviewResp]
	error    *connect.Client[gen.ErrorReq, gen.ErrorResp]
}

// Greeting calls com.github.veqryn.awesome.Default.Greeting.
func (c *_defaultClient) Greeting(ctx context.Context, req *connect.Request[gen.GreetingReq]) (*connect.Response[gen.GreetingResp], error) {
	return c.greeting.CallUnary(ctx, req)
}

// Review calls com.github.veqryn.awesome.Default.Review.
func (c *_defaultClient) Review(ctx context.Context, req *connect.Request[gen.ReviewReq]) (*connect.Response[gen.ReviewResp], error) {
	return c.review.CallUnary(ctx, req)
}

// Error calls com.github.veqryn.awesome.Default.Error.
func (c *_defaultClient) Error(ctx context.Context, req *connect.Request[gen.ErrorReq]) (*connect.Response[gen.ErrorResp], error) {
	return c.error.CallUnary(ctx, req)
}

// DefaultHandler is an implementation of the com.github.veqryn.awesome.Default service.
type DefaultHandler interface {
	Greeting(context.Context, *connect.Request[gen.GreetingReq]) (*connect.Response[gen.GreetingResp], error)
	Review(context.Context, *connect.Request[gen.ReviewReq]) (*connect.Response[gen.ReviewResp], error)
	Error(context.Context, *connect.Request[gen.ErrorReq]) (*connect.Response[gen.ErrorResp], error)
}

// NewDefaultHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDefaultHandler(svc DefaultHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	_defaultGreetingHandler := connect.NewUnaryHandler(
		DefaultGreetingProcedure,
		svc.Greeting,
		connect.WithSchema(defaultGreetingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	_defaultReviewHandler := connect.NewUnaryHandler(
		DefaultReviewProcedure,
		svc.Review,
		connect.WithSchema(defaultReviewMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	_defaultErrorHandler := connect.NewUnaryHandler(
		DefaultErrorProcedure,
		svc.Error,
		connect.WithSchema(defaultErrorMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/com.github.veqryn.awesome.Default/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DefaultGreetingProcedure:
			_defaultGreetingHandler.ServeHTTP(w, r)
		case DefaultReviewProcedure:
			_defaultReviewHandler.ServeHTTP(w, r)
		case DefaultErrorProcedure:
			_defaultErrorHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDefaultHandler returns CodeUnimplemented from all methods.
type UnimplementedDefaultHandler struct{}

func (UnimplementedDefaultHandler) Greeting(context.Context, *connect.Request[gen.GreetingReq]) (*connect.Response[gen.GreetingResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.github.veqryn.awesome.Default.Greeting is not implemented"))
}

func (UnimplementedDefaultHandler) Review(context.Context, *connect.Request[gen.ReviewReq]) (*connect.Response[gen.ReviewResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.github.veqryn.awesome.Default.Review is not implemented"))
}

func (UnimplementedDefaultHandler) Error(context.Context, *connect.Request[gen.ErrorReq]) (*connect.Response[gen.ErrorResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.github.veqryn.awesome.Default.Error is not implemented"))
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: awesome.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Default_Greeting_FullMethodName = "/com.github.veqryn.awesome.Default/Greeting"
	Default_Review_FullMethodName   = "/com.github.veqryn.awesome.Default/Review"
	Default_Error_FullMethodName    = "/com.github.veqryn.awesome.Default/Error"
)

// DefaultClient is the client API for Default service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service definition.
type DefaultClient interface {
	Greeting(ctx context.Context, in *GreetingReq, opts ...grpc.CallOption) (*GreetingResp, error)
	Review(ctx context.Context, in *ReviewReq, opts ...grpc.CallOption) (*ReviewResp, error)
	Error(ctx context.Context, in *ErrorReq, opts ...grpc.CallOption) (*ErrorResp, error)
}

type defaultClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultClient(cc grpc.ClientConnInterface) DefaultClient {
	return &defaultClient{cc}
}

func (c *defaultClient) Greeting(ctx context.Context, in *GreetingReq, opts ...grpc.CallOption) (*GreetingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GreetingResp)
	err := c.cc.Invoke(ctx, Default_Greeting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultClient) Review(ctx context.Context, in *ReviewReq, opts ...grpc.CallOption) (*ReviewResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewResp)
	err := c.cc.Invoke(ctx, Default_Review_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultClient) Error(ctx context.Context, in *ErrorReq, opts ...grpc.CallOption) (*ErrorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResp)
	err := c.cc.Invoke(ctx, Default_Error_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultServer is the server API for Default service.
// All implementations should embed UnimplementedDefaultServer
// for forward compatibility.
//
// The service definition.
type DefaultServer interface {
	Greeting(context.Context, *GreetingReq) (*GreetingResp, error)
	Review(context.Context, *ReviewReq) (*ReviewResp, error)
	Error(context.Context, *ErrorReq) (*ErrorResp, error)
}

// UnimplementedDefaultServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDefaultServer struct{}

func (UnimplementedDefaultServer) Greeting(context.Context, *GreetingReq) (*GreetingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greeting not implemented")
}
func (UnimplementedDefaultServer) Review(context.Context, *ReviewReq) (*ReviewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Review not implemented")
}
func (UnimplementedDefaultServer) Error(context.Context, *ErrorReq) (*ErrorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (UnimplementedDefaultServer) testEmbeddedByValue() {}

// UnsafeDefaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultServer will
// result in compilation errors.
type UnsafeDefaultServer interface {
	mustEmbedUnimplementedDefaultServer()
}

func RegisterDefaultServer(s grpc.ServiceRegistrar, srv DefaultServer) {
	// If the following call pancis, it indicates UnimplementedDefaultServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Default_ServiceDesc, srv)
}

func _Default_Greeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServer).Greeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Default_Greeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServer).Greeting(ctx, req.(*GreetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Default_Review_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServer).Review(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Default_Review_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServer).Review(ctx, req.(*ReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Default_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Default_Error_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServer).Error(ctx, req.(*ErrorReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Default_ServiceDesc is the grpc.ServiceDesc for Default service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Default_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.veqryn.awesome.Default",
	HandlerType: (*DefaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greeting",
			Handler:    _Default_Greeting_Handler,
		},
		{
			MethodName: "Review",
			Handler:    _Default_Review_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _Default_Error_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "awesome.proto",
}

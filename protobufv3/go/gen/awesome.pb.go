// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: awesome.proto

package gen

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GreetingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GreetingReq) Reset() {
	*x = GreetingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awesome_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreetingReq) ProtoMessage() {}

func (x *GreetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_awesome_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreetingReq.ProtoReflect.Descriptor instead.
func (*GreetingReq) Descriptor() ([]byte, []int) {
	return file_awesome_proto_rawDescGZIP(), []int{0}
}

func (x *GreetingReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GreetingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GreetingResp) Reset() {
	*x = GreetingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awesome_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreetingResp) ProtoMessage() {}

func (x *GreetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_awesome_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreetingResp.ProtoReflect.Descriptor instead.
func (*GreetingResp) Descriptor() ([]byte, []int) {
	return file_awesome_proto_rawDescGZIP(), []int{1}
}

func (x *GreetingResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ReviewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author  string  `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Rating  int64   `protobuf:"varint,3,opt,name=rating,proto3" json:"rating,omitempty"`
}

func (x *ReviewReq) Reset() {
	*x = ReviewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awesome_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewReq) ProtoMessage() {}

func (x *ReviewReq) ProtoReflect() protoreflect.Message {
	mi := &file_awesome_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewReq.ProtoReflect.Descriptor instead.
func (*ReviewReq) Descriptor() ([]byte, []int) {
	return file_awesome_proto_rawDescGZIP(), []int{2}
}

func (x *ReviewReq) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ReviewReq) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ReviewReq) GetRating() int64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type ReviewResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReviewResp) Reset() {
	*x = ReviewResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awesome_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewResp) ProtoMessage() {}

func (x *ReviewResp) ProtoReflect() protoreflect.Message {
	mi := &file_awesome_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewResp.ProtoReflect.Descriptor instead.
func (*ReviewResp) Descriptor() ([]byte, []int) {
	return file_awesome_proto_rawDescGZIP(), []int{3}
}

type ErrorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ErrorReq) Reset() {
	*x = ErrorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awesome_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorReq) ProtoMessage() {}

func (x *ErrorReq) ProtoReflect() protoreflect.Message {
	mi := &file_awesome_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorReq.ProtoReflect.Descriptor instead.
func (*ErrorReq) Descriptor() ([]byte, []int) {
	return file_awesome_proto_rawDescGZIP(), []int{4}
}

type ErrorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string                `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Details    *string               `protobuf:"bytes,2,opt,name=details,proto3,oneof" json:"details,omitempty"`
	Properties map[string]*anypb.Any `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ErrorResp) Reset() {
	*x = ErrorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awesome_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResp) ProtoMessage() {}

func (x *ErrorResp) ProtoReflect() protoreflect.Message {
	mi := &file_awesome_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResp.ProtoReflect.Descriptor instead.
func (*ErrorResp) Descriptor() ([]byte, []int) {
	return file_awesome_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorResp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ErrorResp) GetDetails() string {
	if x != nil && x.Details != nil {
		return *x.Details
	}
	return ""
}

func (x *ErrorResp) GetProperties() map[string]*anypb.Any {
	if x != nil {
		return x.Properties
	}
	return nil
}

var File_awesome_proto protoreflect.FileDescriptor

var file_awesome_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x65, 0x71, 0x72,
	0x79, 0x6e, 0x2e, 0x61, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x0b, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x67,
	0x72, 0x65, 0x65, 0x74, 0x4a, 0x07, 0x22, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0x78, 0x1e, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x0c, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x10, 0x47, 0x72, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4a, 0x0f, 0x22,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21, 0x22, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x14, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x78, 0x0a, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41,
	0x12, 0x32, 0x0e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x78, 0x64, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x12, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x31, 0x20, 0x74, 0x6f, 0x20, 0x35, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x14, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x3a, 0x17, 0x92, 0x41, 0x14, 0x0a, 0x12, 0xd2, 0x01, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0xd2, 0x01, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x0c, 0x0a, 0x0a, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x22, 0x94, 0x02, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x65, 0x71, 0x72, 0x79, 0x6e, 0x2e, 0x61,
	0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x1b, 0x92, 0x41, 0x18, 0x0a, 0x16, 0x32, 0x0c, 0x41, 0x6e, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xd2, 0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0xcd, 0x05, 0x0a, 0x07, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0xee, 0x01, 0x0a, 0x08, 0x47, 0x72, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x76, 0x65, 0x71, 0x72, 0x79, 0x6e, 0x2e, 0x61, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x2e,
	0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x65, 0x71, 0x72, 0x79, 0x6e, 0x2e,
	0x61, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x90, 0x01, 0x92, 0x41, 0x75, 0x12, 0x14, 0x53, 0x61, 0x79, 0x20,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x6f, 0x6e, 0x65,
	0x1a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x61, 0x20, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x20, 0x1a,
	0x1e, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x88, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x76, 0x65, 0x71, 0x72, 0x79, 0x6e, 0x2e, 0x61, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x65, 0x71, 0x72, 0x79, 0x6e, 0x2e, 0x61, 0x77, 0x65,
	0x73, 0x6f, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x22,
	0xb0, 0x01, 0x92, 0x41, 0x99, 0x01, 0x12, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x20, 0x61, 0x20, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x4a, 0x35, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x21, 0x1a, 0x1f, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x4a, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x20, 0x1a,
	0x1e, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x65, 0x71, 0x72, 0x79, 0x6e,
	0x2e, 0x61, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x76,
	0x65, 0x71, 0x72, 0x79, 0x6e, 0x2e, 0x61, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x71, 0x92, 0x41, 0x60, 0x12, 0x0c, 0x47, 0x65,
	0x74, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x16, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4a, 0x38, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x61, 0x64,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x20, 0x1a, 0x1e, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x77, 0x65, 0x73,
	0x6f, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x08, 0x12, 0x06, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0xa3, 0x02, 0x92, 0x41, 0xeb,
	0x01, 0x12, 0xb1, 0x01, 0x0a, 0x0e, 0x41, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x47, 0x4f,
	0x20, 0x41, 0x50, 0x49, 0x12, 0x4d, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x63, 0x61, 0x73, 0x65, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x61, 0x20, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x20, 0x61, 0x70, 0x69, 0x20,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x2a, 0x49, 0x0a, 0x0b, 0x4d, 0x49, 0x54, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x65, 0x71, 0x72, 0x79, 0x6e, 0x2f, 0x61, 0x77,
	0x65, 0x73, 0x6f, 0x6d, 0x65, 0x2d, 0x67, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6c, 0x6f,
	0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x05,
	0x31, 0x2e, 0x30, 0x2e, 0x30, 0x1a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74,
	0x3a, 0x38, 0x30, 0x38, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x32, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x65, 0x71, 0x72, 0x79, 0x6e, 0x2f,
	0x61, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x2d, 0x67, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x76, 0x33, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_awesome_proto_rawDescOnce sync.Once
	file_awesome_proto_rawDescData = file_awesome_proto_rawDesc
)

func file_awesome_proto_rawDescGZIP() []byte {
	file_awesome_proto_rawDescOnce.Do(func() {
		file_awesome_proto_rawDescData = protoimpl.X.CompressGZIP(file_awesome_proto_rawDescData)
	})
	return file_awesome_proto_rawDescData
}

var file_awesome_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_awesome_proto_goTypes = []any{
	(*GreetingReq)(nil),  // 0: com.github.veqryn.awesome.GreetingReq
	(*GreetingResp)(nil), // 1: com.github.veqryn.awesome.GreetingResp
	(*ReviewReq)(nil),    // 2: com.github.veqryn.awesome.ReviewReq
	(*ReviewResp)(nil),   // 3: com.github.veqryn.awesome.ReviewResp
	(*ErrorReq)(nil),     // 4: com.github.veqryn.awesome.ErrorReq
	(*ErrorResp)(nil),    // 5: com.github.veqryn.awesome.ErrorResp
	nil,                  // 6: com.github.veqryn.awesome.ErrorResp.PropertiesEntry
	(*anypb.Any)(nil),    // 7: google.protobuf.Any
}
var file_awesome_proto_depIdxs = []int32{
	6, // 0: com.github.veqryn.awesome.ErrorResp.properties:type_name -> com.github.veqryn.awesome.ErrorResp.PropertiesEntry
	7, // 1: com.github.veqryn.awesome.ErrorResp.PropertiesEntry.value:type_name -> google.protobuf.Any
	0, // 2: com.github.veqryn.awesome.Default.Greeting:input_type -> com.github.veqryn.awesome.GreetingReq
	2, // 3: com.github.veqryn.awesome.Default.Review:input_type -> com.github.veqryn.awesome.ReviewReq
	4, // 4: com.github.veqryn.awesome.Default.Error:input_type -> com.github.veqryn.awesome.ErrorReq
	1, // 5: com.github.veqryn.awesome.Default.Greeting:output_type -> com.github.veqryn.awesome.GreetingResp
	3, // 6: com.github.veqryn.awesome.Default.Review:output_type -> com.github.veqryn.awesome.ReviewResp
	5, // 7: com.github.veqryn.awesome.Default.Error:output_type -> com.github.veqryn.awesome.ErrorResp
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_awesome_proto_init() }
func file_awesome_proto_init() {
	if File_awesome_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_awesome_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GreetingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awesome_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GreetingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awesome_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ReviewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awesome_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ReviewResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awesome_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ErrorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awesome_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ErrorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_awesome_proto_msgTypes[2].OneofWrappers = []any{}
	file_awesome_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_awesome_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_awesome_proto_goTypes,
		DependencyIndexes: file_awesome_proto_depIdxs,
		MessageInfos:      file_awesome_proto_msgTypes,
	}.Build()
	File_awesome_proto = out.File
	file_awesome_proto_rawDesc = nil
	file_awesome_proto_goTypes = nil
	file_awesome_proto_depIdxs = nil
}

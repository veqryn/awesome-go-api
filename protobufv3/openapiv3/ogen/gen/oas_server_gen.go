// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DefaultError implements Default_Error operation.
	//
	// Responds with an error.
	//
	// GET /error
	DefaultError(ctx context.Context) error
	// DefaultGreeting implements Default_Greeting operation.
	//
	// Responds with a greeting.
	//
	// GET /greeting/{name}
	DefaultGreeting(ctx context.Context, params DefaultGreetingParams) (*AwesomeGreetingResp, error)
	// DefaultReview implements Default_Review operation.
	//
	// Post a review to be saved.
	//
	// POST /reviews
	DefaultReview(ctx context.Context, req *AwesomeReviewReq) error
	// NewError creates *RpcStatusStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *RpcStatusStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}

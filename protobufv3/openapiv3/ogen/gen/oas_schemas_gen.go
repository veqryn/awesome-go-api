// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
)

func (s *RpcStatusStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/awesomeErrorResp
type AwesomeErrorResp struct{}

// Ref: #/components/schemas/awesomeGreetingResp
type AwesomeGreetingResp struct {
	// Greeting message.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *AwesomeGreetingResp) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *AwesomeGreetingResp) SetMessage(val string) {
	s.Message = val
}

// Ref: #/components/schemas/awesomeReviewReq
type AwesomeReviewReq struct {
	// Author of the review.
	Author string `json:"author"`
	// Review message.
	Message OptString `json:"message"`
	// Rating from 1 to 5.
	Rating int64 `json:"rating"`
}

// GetAuthor returns the value of Author.
func (s *AwesomeReviewReq) GetAuthor() string {
	return s.Author
}

// GetMessage returns the value of Message.
func (s *AwesomeReviewReq) GetMessage() OptString {
	return s.Message
}

// GetRating returns the value of Rating.
func (s *AwesomeReviewReq) GetRating() int64 {
	return s.Rating
}

// SetAuthor sets the value of Author.
func (s *AwesomeReviewReq) SetAuthor(val string) {
	s.Author = val
}

// SetMessage sets the value of Message.
func (s *AwesomeReviewReq) SetMessage(val OptString) {
	s.Message = val
}

// SetRating sets the value of Rating.
func (s *AwesomeReviewReq) SetRating(val int64) {
	s.Rating = val
}

// Ref: #/components/schemas/awesomeReviewResp
type AwesomeReviewResp struct{}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
// Example 1: Pack and unpack a message in C++.
// Foo foo = ...;
// Any any;
// any.PackFrom(foo);
// ...
// if (any.UnpackTo(&foo)) {
// ...
// }
// Example 2: Pack and unpack a message in Java.
// Foo foo = ...;
// Any any = Any.pack(foo);
// ...
// if (any.is(Foo.class)) {
// foo = any.unpack(Foo.class);
// }
// // or ...
// if (any.isSameTypeAs(Foo.getDefaultInstance())) {
// foo = any.unpack(Foo.getDefaultInstance());
// }
// Example 3: Pack and unpack a message in Python.
// foo = Foo(...)
// any = Any()
// any.Pack(foo)
// ...
// if any.Is(Foo.DESCRIPTOR):
// any.Unpack(foo)
// ...
// Example 4: Pack and unpack a message in Go
// foo := &pb.Foo{...}
// any, err := anypb.New(foo)
// if err != nil {
// ...
// }
// ...
// foo := &pb.Foo{}
// if err := any.UnmarshalTo(foo); err != nil {
// ...
// }
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
// package google.profile;
// message Person {
// string first_name = 1;
// string last_name = 2;
// }
// {
// "@type": "type.googleapis.com/google.profile.Person",
// "firstName": <string>,
// "lastName": <string>
// }
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
// {
// "@type": "type.googleapis.com/google.protobuf.Duration",
// "value": "1.212s"
// }.
// Ref: #/components/schemas/protobufAny
type ProtobufAny struct {
	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	// value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	// URL, or have them precompiled into a binary to avoid any
	// lookup. Therefore, binary compatibility needs to be preserved
	// on changes to types. (Use versioned type names to manage
	// breaking changes.)
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com. As of May 2023, there are no widely used type server
	// implementations and no plans to implement one.
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	Type            OptString `json:"@type"`
	AdditionalProps ProtobufAnyAdditional
}

// GetType returns the value of Type.
func (s *ProtobufAny) GetType() OptString {
	return s.Type
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *ProtobufAny) GetAdditionalProps() ProtobufAnyAdditional {
	return s.AdditionalProps
}

// SetType sets the value of Type.
func (s *ProtobufAny) SetType(val OptString) {
	s.Type = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *ProtobufAny) SetAdditionalProps(val ProtobufAnyAdditional) {
	s.AdditionalProps = val
}

type ProtobufAnyAdditional map[string]ProtobufAnyAdditionalItem

func (s *ProtobufAnyAdditional) init() ProtobufAnyAdditional {
	m := *s
	if m == nil {
		m = map[string]ProtobufAnyAdditionalItem{}
		*s = m
	}
	return m
}

type ProtobufAnyAdditionalItem struct{}

// Ref: #/components/schemas/rpcStatus
type RpcStatus struct {
	Code    OptInt32      `json:"code"`
	Message OptString     `json:"message"`
	Details []ProtobufAny `json:"details"`
}

// GetCode returns the value of Code.
func (s *RpcStatus) GetCode() OptInt32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *RpcStatus) GetMessage() OptString {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *RpcStatus) GetDetails() []ProtobufAny {
	return s.Details
}

// SetCode sets the value of Code.
func (s *RpcStatus) SetCode(val OptInt32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *RpcStatus) SetMessage(val OptString) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *RpcStatus) SetDetails(val []ProtobufAny) {
	s.Details = val
}

// RpcStatusStatusCode wraps RpcStatus with StatusCode.
type RpcStatusStatusCode struct {
	StatusCode int
	Response   RpcStatus
}

// GetStatusCode returns the value of StatusCode.
func (s *RpcStatusStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *RpcStatusStatusCode) GetResponse() RpcStatus {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *RpcStatusStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *RpcStatusStatusCode) SetResponse(val RpcStatus) {
	s.Response = val
}
